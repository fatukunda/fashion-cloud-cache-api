{"version":3,"sources":["../../src/services/cacheService.js"],"names":["CacheService","cacheInfo","cache","Cache","save","key","findOne","exec","find","deleteMany"],"mappings":";;;;;;;;;;;;;;;;;AACA;;AADA;IAGMA,Y;;;;;;;;;;AACJ;;;;;;;;oDAKyBC,S;;;;;;;AAEfC,gBAAAA,K,GAAQ,IAAIC,iBAAJ,CAAUF,SAAV,C;;uBACRC,KAAK,CAACE,IAAN,E;;;iDACCF,K;;;;;;;;;;;;;;;;;;;;;AAMX;;;;;;;;;;;qDAK4BG,G;;;;;;;;uBAEJF,kBAAMG,OAAN,CAAc;AAAED,kBAAAA,GAAG,EAAHA;AAAF,iBAAd,EAAuBE,IAAvB,E;;;AAAdL,gBAAAA,K;kDACCA,K;;;;;;;;;;;;;;;;;;;;;AAMX;;;;;;;;;;;;;;;;;;uBAMwBC,kBAAMK,IAAN,CAAW,EAAX,EAAeD,IAAf,E;;;AAAdL,gBAAAA,K;kDACCA,K;;;;;;;;;;;;;;;;;;;;;AAMX;;;;;;;;;;;qDAKgCG,G;;;;;;;;uBAERF,kBAAMK,IAAN,CAAW;AAAEH,kBAAAA,GAAG,EAAHA;AAAF,iBAAX,C;;;AAAdH,gBAAAA,K;;qBACFA,K;;;;;;uBACIC,kBAAMM,UAAN,CAAiB;AAAEJ,kBAAAA,GAAG,EAAHA;AAAF,iBAAjB,EAA0BE,IAA1B,E;;;;;;;;;;;;;;;;;;;;;;;;;AAOZ;;;;;;;;;;;;;;;;;uBAMUJ,kBAAMM,UAAN,CAAiB,EAAjB,EAAqBF,IAArB,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eAOGP,Y","sourcesContent":["/* eslint-disable no-useless-catch */\nimport Cache from '../models/Cache';\n\nclass CacheService {\n  /**\n     * @param  {object} cacheInfo\n     * @returns {Promise}\n     * @description Creates a new cache\n     */\n  static async createCache(cacheInfo) {\n    try {\n      const cache = new Cache(cacheInfo);\n      await cache.save();\n      return cache;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n     * @param  {object} key\n     * @returns {Promise}\n     * @description Return cached data of a given key\n     */\n  static async findCacheByKey(key) {\n    try {\n      const cache = await Cache.findOne({ key }).exec();\n      return cache;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n     * @returns {Promise}\n     * @description Returns all keys in a cache\n     */\n  static async findAllKeysInCache() {\n    try {\n      const cache = await Cache.find({}).exec();\n      return cache;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n     * @param  {string} cacheInfo\n     * @returns {Promise}\n     * @description Removes a given key from the cache\n     */\n  static async removeKeyFromCache(key) {\n    try {\n      const cache = await Cache.find({ key });\n      if (cache) {\n        await Cache.deleteMany({ key }).exec();\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n     * @returns {Promise}\n     * @description Removes all keys from cache\n     */\n  static async removeAllKeysFromCache() {\n    try {\n      await Cache.deleteMany({}).exec();\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\nexport default CacheService;\n"],"file":"cacheService.js"}